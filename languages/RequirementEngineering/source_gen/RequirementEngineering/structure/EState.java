package RequirementEngineering.structure;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.LinkedList;

public enum EState {
  Over("Over", "Over"),
  Current("Current", "Current"),
  Expected("Expected", "Expected");

  private String myName;
  public String getName() {
    return this.myName;
  }
  public String getValueAsString() {
    return this.myValue;
  }
  public static List<EState> getConstants() {
    List<EState> list = ListSequence.fromList(new LinkedList<EState>());
    ListSequence.fromList(list).addElement(EState.Over);
    ListSequence.fromList(list).addElement(EState.Current);
    ListSequence.fromList(list).addElement(EState.Expected);
    return list;
  }
  public static EState getDefault() {
    return null;
  }
  public static EState parseValue(String value) {
    if (value == null) {
      return EState.getDefault();
    }
    if (value.equals(EState.Over.getValueAsString())) {
      return EState.Over;
    }
    if (value.equals(EState.Current.getValueAsString())) {
      return EState.Current;
    }
    if (value.equals(EState.Expected.getValueAsString())) {
      return EState.Expected;
    }
    return EState.getDefault();
  }
  private String myValue;
  EState(String name, String value) {
    this.myName = name;
    this.myValue = value;
  }
  public String getValue() {
    return this.myValue;
  }
}
